rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /projects/{project} {
      function isEmailVerified() {
        return
          request.auth != null &&
          request.auth.token.email_verified;
      }
      
      function isEmailDomainAllowed() {
        let allowedEmailDomainsRegex = get(/databases/$(database)/documents/projects/$(project)).data.allowedEmailDomainsRegex;
        return request.auth.token.email.matches(allowedEmailDomainsRegex);
      }

      function isUserListed() {
        return exists(/databases/$(database)/documents/projects/$(project)/users/$(request.auth.token.email));
      }
      
      function isUserAllowed() {
        return 
          isEmailVerified() &&
          isEmailDomainAllowed() &&
          isUserListed();
      }

      allow read: if isUserAllowed();

      match /user_presence/{user} {
        allow read: if isUserAllowed();
        allow write: if isUserAllowed() && user == request.auth.token.email;
      }

      match /{collection}/{docId} {
        allow read: if isUserAllowed();

        match /{nestedCollection}/{nestedDocId} {
          allow read: if
            isUserAllowed() &&
            (collection != "tables" || docId != "uuid-table");
        }
      }
    }
  }
}
